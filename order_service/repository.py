from sqlalchemy.ext.asyncio import AsyncSession
from schemes import OrderDefault, ResponseOrder
from models import Order
import logging
import json
import os
import redis.asyncio as aioredis
import aio_pika
import asyncio
from redis_manager import get_redis


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

RABBIT_MQ_URL = os.getenv("RABBITMQ_URL", "amqp://shkibidi1:pokazal1@rabbitmq:5672/")


QUEUE_NAME = "order_queue"

connection = None
channel = None

async def connection_to_rabbitmq():
    global connection, channel
    while connection is None:
        try:
            connection = await aio_pika.connect_robust(RABBIT_MQ_URL)
            channel = await connection.channel()
            logger.info(f"‚úÖ Connected to RabbitMQ: {connection}")
        except Exception as e:
            logger.info(f"üîÑ Waiting for RabbitMQ... {e}, connection: {connection}")
            await asyncio.sleep(5)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

async def send_to_rabbitmq(queue_name, message: dict) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å, –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ."""
    global channel
    if channel is None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª
        await connection_to_rabbitmq()

    await channel.default_exchange.publish(
        aio_pika.Message(body=json.dumps(message).encode("utf-8")),  # –°–æ–æ–±—â–µ–Ω–∏–µ
        routing_key=queue_name,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    )


async def create_order(order: OrderDefault, db: AsyncSession) -> Order:
    db_order = Order(items=[item.model_dump() for item in order.items], user_id=order.user_id)
    db.add(db_order)
    await db.commit()
    await db.refresh(db_order)

    order_dict = db_order.to_dict()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ RabbitMQ
    await send_to_rabbitmq(QUEUE_NAME, {"status": "new", "info": order_dict})

    return db_order


async def get_order(order_id: int, db: AsyncSession) -> Order | None:
    """–ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –∫—ç—à–∞ Redis –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    redis_client = await get_redis()
    if redis_client is None:
        logger.error("‚ùå Redis client is not initialized!")
        raise RuntimeError("Redis client is not connected")

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –∫—ç—à Redis
    cached_order = await redis_client.get(f"order:{order_id}")
    if cached_order:
        logger.info(f"‚úÖ Found order in Redis cache: {order_id}")
        order_data = json.loads(cached_order)
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º items –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Items
        return Order(**order_data)

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Redis, –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    result = await db.get(Order, order_id)
    if result:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ORM –æ–±—ä–µ–∫—Ç –≤ Pydantic –º–æ–¥–µ–ª—å (OrderDefault)
        result_dict = ResponseOrder.model_validate(result.to_dict())  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Pydantic –º–æ–¥–µ–ª—å

        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ JSON –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
        await redis_client.set(f"order:{order_id}", result_dict.model_dump_json(), ex=300)
        logger.info(f"‚úÖ Found order in database and cached it: {order_id}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ORM –æ–±—ä–µ–∫—Ç (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤ –±–∞–∑–µ)
        return result

    logger.warning(f"‚ùå Order not found: {order_id}")
    return None



async def main():
    await connection_to_rabbitmq()  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ













