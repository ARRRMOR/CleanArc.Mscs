import redis.asyncio as aioredis
import logging
import os


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

REDIS_URL = os.getenv("REDIS_URL", "redis://redis:6379/0")

redis_client = None  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç

async def connect_to_redis():
    """ –°–æ–∑–¥–∞—ë—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ. """
    global redis_client
    redis_client = aioredis.from_url(REDIS_URL, encoding="utf-8", decode_responses=True)
    try:
        await redis_client.ping()
        logger.info("‚úÖ Connected to Redis")
    except Exception as e:
        logger.error(f"‚ùå Failed to connect to Redis: {e}")

async def close_redis():
    """ –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞. """
    global redis_client
    if redis_client:
        await redis_client.close()
        logger.info("üîå Redis connection closed")

async def get_redis():
    if not redis_client:
        raise RuntimeError("Redis –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
    return redis_client
